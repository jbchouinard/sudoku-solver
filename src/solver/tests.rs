use std::str::FromStr;

use test_case::test_case;

use crate::{solver::strategies::all_strategies, solver::Solver, Grid};

#[test_case(
    "000120000900005060075040093092050007164030528300010640680090750020500001000082000",
    "436129875918375264275846193892654317164937528357218649683491752729563481541782936";
    "trivial"
)]
#[test_case(
    "000031026000000000000507180049000200003070400008000590025906000000000000690850000",
    "857431926412698375936527184149385267563279418278164593725946831384712659691853742";
    "hidden-single"
)]
#[test_case(
    "400000038002004100005300240070609004020000070600703090057008300003900400240000009",
    "461572938732894156895316247378629514529481673614753892957248361183967425246135789";
    "naked-pair"
)]
#[test_case(
    "070008029002000004854020000008374200000000000003261700000090612200000400130600070",
    "671438529392715864854926137518374296726859341943261785487593612269187453135642978";
    "naked-triple"
)]
#[test_case(
    "720400030000000047001076802010039000000801000000260080209680400340000000060003075",
    "725498136986312547431576892812739654674851329593264781259687413347125968168943275";
    "hidden-pair"
)]
fn solver_test(sudoku: &str, solution: &str) {
    let solver = Solver::new(all_strategies());
    let sudoku = Grid::from_str(sudoku).unwrap();
    let expected = Grid::from_str(solution).unwrap();
    let actual = solver.solve(&sudoku);
    assert_eq!(expected.to_string(), actual.grid.to_string());
}
